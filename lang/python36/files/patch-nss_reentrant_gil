diff --git a/Modules/grpmodule.c b/Modules/grpmodule.c
index f577fd3ab4..778e9835ca 100644
--- Modules/grpmodule.c
+++ Modules/grpmodule.c
@@ -96,7 +96,8 @@ static PyObject *
 grp_getgrgid_impl(PyObject *module, PyObject *id)
 /*[clinic end generated code: output=30797c289504a1ba input=15fa0e2ccf5cda25]*/
 {
-    PyObject *py_int_id;
+    PyObject *py_int_id, *retval = NULL;
+    char *buf;
     gid_t gid;
     struct group *p;
 
@@ -119,8 +120,35 @@ grp_getgrgid_impl(PyObject *module, PyObject *id)
         }
         Py_DECREF(py_int_id);
     }
+#ifdef HAVE_GETGRGID_R
+    Py_BEGIN_ALLOW_THREADS
+    int status, bufsize = NSS_BUFLEN_GROUP;
+    struct group grp;
 
-    if ((p = getgrgid(gid)) == NULL) {
+    buf = PyMem_RawMalloc(bufsize);
+
+    do {
+        status = getgrgid_r(gid, &grp, buf, bufsize, &p);
+        if (p != NULL || status != ERANGE) {
+            break;
+        }
+        if ((bufsize << 1) > (NSS_BUFLEN_GROUP << 10)) {
+            status = ERANGE;
+            break;
+        }
+        bufsize <<= 1;
+        buf = PyMem_RawRealloc(buf, bufsize);
+    } while (1);
+
+    if (status != 0 || p == NULL) {
+        PyMem_RawFree(buf);
+        p = NULL;
+    }
+    Py_END_ALLOW_THREADS
+#else
+    p = getgrgid(gid);
+#endif
+    if (p == NULL) {
         PyObject *gid_obj = _PyLong_FromGid(gid);
         if (gid_obj == NULL)
             return NULL;
@@ -128,7 +156,11 @@ grp_getgrgid_impl(PyObject *module, PyObject *id)
         Py_DECREF(gid_obj);
         return NULL;
     }
-    return mkgrent(p);
+    retval = mkgrent(p);
+#ifdef HAVE_GETGRGID_R
+    PyMem_RawFree(buf);
+#endif
+    return retval;
 }
 
 /*[clinic input]
@@ -145,7 +177,7 @@ static PyObject *
 grp_getgrnam_impl(PyObject *module, PyObject *name)
 /*[clinic end generated code: output=67905086f403c21c input=08ded29affa3c863]*/
 {
-    char *name_chars;
+    char *buf, *name_chars;
     struct group *p;
     PyObject *bytes, *retval = NULL;
 
@@ -154,12 +186,42 @@ grp_getgrnam_impl(PyObject *module, PyObject *name)
     /* check for embedded null bytes */
     if (PyBytes_AsStringAndSize(bytes, &name_chars, NULL) == -1)
         goto out;
+#ifdef HAVE_GETGRNAM_R
+    Py_BEGIN_ALLOW_THREADS
+    int status, bufsize = NSS_BUFLEN_GROUP;
+    struct group grp;
+
+    buf = PyMem_RawMalloc(bufsize);
+
+    do {
+        status = getgrnam_r(name_chars, &grp, buf, bufsize, &p);
+        if (p != NULL || status != ERANGE) {
+            break;
+        }
+        if ((bufsize << 1) > (NSS_BUFLEN_GROUP << 10)) {
+            status = ERANGE;
+            break;
+        }
+        bufsize <<= 1;
+        buf = PyMem_RawRealloc(buf, bufsize);
+    } while (1);
 
-    if ((p = getgrnam(name_chars)) == NULL) {
+    if (status != 0 || p == NULL) {
+        PyMem_RawFree(buf);
+        p = NULL;
+    }
+    Py_END_ALLOW_THREADS
+#else
+    p = getgrnam(name_chars);
+#endif
+    if (p == NULL) {
         PyErr_Format(PyExc_KeyError, "getgrnam(): name not found: %s", name_chars);
         goto out;
     }
     retval = mkgrent(p);
+#ifdef HAVE_GETGRNAM_R
+    PyMem_RawFree(buf);
+#endif
 out:
     Py_DECREF(bytes);
     return retval;
diff --git a/Modules/pwdmodule.c b/Modules/pwdmodule.c
index bbef2de9c5..7ecb045213 100644
--- Modules/pwdmodule.c
+++ Modules/pwdmodule.c
@@ -116,8 +116,10 @@ static PyObject *
 pwd_getpwuid(PyObject *module, PyObject *uidobj)
 /*[clinic end generated code: output=c4ee1d4d429b86c4 input=ae64d507a1c6d3e8]*/
 {
+    PyObject *retval = NULL;
     uid_t uid;
     struct passwd *p;
+    char *buf;
 
     if (!_Py_Uid_Converter(uidobj, &uid)) {
         if (PyErr_ExceptionMatches(PyExc_OverflowError))
@@ -125,7 +127,35 @@ pwd_getpwuid(PyObject *module, PyObject *uidobj)
                          "getpwuid(): uid not found");
         return NULL;
     }
-    if ((p = getpwuid(uid)) == NULL) {
+#ifdef HAVE_GETPWUID_R
+    Py_BEGIN_ALLOW_THREADS
+    int status, bufsize = NSS_BUFLEN_PASSWD;
+    struct passwd pwd;
+
+    buf = PyMem_RawMalloc(bufsize);
+
+    do {
+        status = getpwuid_r(uid, &pwd, buf, bufsize, &p);
+        if (p != NULL || status != ERANGE) {
+            break;
+        }
+        if ((bufsize << 1) > (NSS_BUFLEN_PASSWD << 10)) {
+            status = ERANGE;
+            break;
+        }
+        bufsize <<= 1;
+        buf = PyMem_RawRealloc(buf, bufsize);
+    } while (1);
+
+    if (status != 0 || p == NULL) {
+        PyMem_RawFree(buf);
+        p = NULL;
+    }
+    Py_END_ALLOW_THREADS
+#else
+    p = getpwuid(uid);
+#endif
+    if (p == NULL) {
         PyObject *uid_obj = _PyLong_FromUid(uid);
         if (uid_obj == NULL)
             return NULL;
@@ -134,7 +164,11 @@ pwd_getpwuid(PyObject *module, PyObject *uidobj)
         Py_DECREF(uid_obj);
         return NULL;
     }
-    return mkpwent(p);
+    retval = mkpwent(p);
+#ifdef HAVE_GETPWUID_R
+    PyMem_RawFree(buf);
+#endif
+    return retval;
 }
 
 /*[clinic input]
@@ -152,7 +186,7 @@ static PyObject *
 pwd_getpwnam_impl(PyObject *module, PyObject *arg)
 /*[clinic end generated code: output=6abeee92430e43d2 input=d5f7e700919b02d3]*/
 {
-    char *name;
+    char *buf, *name;
     struct passwd *p;
     PyObject *bytes, *retval = NULL;
 
@@ -161,12 +195,43 @@ pwd_getpwnam_impl(PyObject *module, PyObject *arg)
     /* check for embedded null bytes */
     if (PyBytes_AsStringAndSize(bytes, &name, NULL) == -1)
         goto out;
-    if ((p = getpwnam(name)) == NULL) {
+#ifdef HAVE_GETPWNAM_R
+    Py_BEGIN_ALLOW_THREADS
+    int status, bufsize = NSS_BUFLEN_PASSWD;
+    struct passwd pwd;
+
+    buf = PyMem_RawMalloc(bufsize);
+
+    do {
+        status = getpwnam_r(name, &pwd, buf, bufsize, &p);
+        if (p != NULL || status != ERANGE) {
+            break;
+        }
+        if ((bufsize << 1) > (NSS_BUFLEN_PASSWD << 10)) {
+            status = ERANGE;
+            break;
+        }
+        bufsize <<= 1;
+        buf = PyMem_RawRealloc(buf, bufsize);
+    } while (1);
+
+    if (status != 0 || p == NULL) {
+        PyMem_RawFree(buf);
+        p = NULL;
+    }
+    Py_END_ALLOW_THREADS
+#else
+    p = getpwnam(name);
+#endif
+    if (p == NULL) {
         PyErr_Format(PyExc_KeyError,
                      "getpwnam(): name not found: %s", name);
         goto out;
     }
     retval = mkpwent(p);
+#ifdef HAVE_GETPWNAM_R
+    PyMem_RawFree(buf);
+#endif
 out:
     Py_DECREF(bytes);
     return retval;
diff --git a/configure b/configure
index 669060bea1..7a6256f3ab 100755
--- configure
+++ configure
@@ -779,6 +779,7 @@ infodir
 docdir
 oldincludedir
 includedir
+runstatedir
 localstatedir
 sharedstatedir
 sysconfdir
@@ -886,6 +887,7 @@ datadir='${datarootdir}'
 sysconfdir='${prefix}/etc'
 sharedstatedir='${prefix}/com'
 localstatedir='${prefix}/var'
+runstatedir='${localstatedir}/run'
 includedir='${prefix}/include'
 oldincludedir='/usr/include'
 docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
@@ -1138,6 +1140,15 @@ do
   | -silent | --silent | --silen | --sile | --sil)
     silent=yes ;;
 
+  -runstatedir | --runstatedir | --runstatedi | --runstated \
+  | --runstate | --runstat | --runsta | --runst | --runs \
+  | --run | --ru | --r)
+    ac_prev=runstatedir ;;
+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \
+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \
+  | --run=* | --ru=* | --r=*)
+    runstatedir=$ac_optarg ;;
+
   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
     ac_prev=sbindir ;;
   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
@@ -1275,7 +1286,7 @@ fi
 for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
 		datadir sysconfdir sharedstatedir localstatedir includedir \
 		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
-		libdir localedir mandir
+		libdir localedir mandir runstatedir
 do
   eval ac_val=\$$ac_var
   # Remove trailing slashes.
@@ -1428,6 +1439,7 @@ Fine tuning of the installation directories:
   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
   --libdir=DIR            object code libraries [EPREFIX/lib]
   --includedir=DIR        C header files [PREFIX/include]
   --oldincludedir=DIR     C header files for non-gcc [/usr/include]
@@ -13497,6 +13509,140 @@ fi
 
 
 
+# checks for re-entrant nss functions
+for ac_func in getpwnam_r
+do :
+  ac_fn_c_check_func "$LINENO" "getpwnam_r" "ac_cv_func_getpwnam_r"
+if test "x$ac_cv_func_getpwnam_r" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_GETPWNAM_R 1
+_ACEOF
+
+
+$as_echo "#define HAVE_GETPWNAM_R 1" >>confdefs.h
+
+
+
+fi
+done
+
+
+for ac_func in getpwuid_r
+do :
+  ac_fn_c_check_func "$LINENO" "getpwuid_r" "ac_cv_func_getpwuid_r"
+if test "x$ac_cv_func_getpwuid_r" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_GETPWUID_R 1
+_ACEOF
+
+
+$as_echo "#define HAVE_GETPWUID_R 1" >>confdefs.h
+
+
+
+fi
+done
+
+
+for ac_func in getgrnam_r
+do :
+  ac_fn_c_check_func "$LINENO" "getgrnam_r" "ac_cv_func_getgrnam_r"
+if test "x$ac_cv_func_getgrnam_r" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_GETGRNAM_R 1
+_ACEOF
+
+
+$as_echo "#define HAVE_GETGRNAM_R 1" >>confdefs.h
+
+
+
+fi
+done
+
+
+for ac_func in getgrgid_r
+do :
+  ac_fn_c_check_func "$LINENO" "getgrgid_r" "ac_cv_func_getgrgid_r"
+if test "x$ac_cv_func_getgrgid_r" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_GETGRGID_R 1
+_ACEOF
+
+
+$as_echo "#define HAVE_GETGRGID_R 1" >>confdefs.h
+
+
+
+fi
+done
+
+
+if test "$cross_compiling" = yes; then :
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run test program while cross compiling
+See \`config.log' for more details" "$LINENO" 5; }
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <pwd.h>
+int main(int argc, char*argv[])
+{
+#ifdef NSS_BUFLEN_PASSWD
+    return 0;
+#else
+    return 1;
+#endif
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+else
+
+$as_echo "#define NSS_BUFLEN_PASSWD 1024" >>confdefs.h
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+
+if test "$cross_compiling" = yes; then :
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run test program while cross compiling
+See \`config.log' for more details" "$LINENO" 5; }
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#include <grp.h>
+int main(int argc, char*argv[])
+{
+#ifdef NSS_BUFLEN_GROUP
+    return 0;
+#else
+    return 1;
+#endif
+}
+
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+
+else
+
+$as_echo "#define NSS_BUFLEN_GROUP 1024" >>confdefs.h
+
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+
+
 # checks for system services
 # (none yet)
 
diff --git a/configure.ac b/configure.ac
index 679fac318e..fd8d5d1191 100644
--- configure.ac
+++ configure.ac
@@ -4115,6 +4115,60 @@ AC_SUBST(HAVE_GETHOSTBYNAME_R_3_ARG)
 AC_SUBST(HAVE_GETHOSTBYNAME_R)
 AC_SUBST(HAVE_GETHOSTBYNAME)
 
+# checks for re-entrant nss functions
+AC_CHECK_FUNCS(getpwnam_r,
+  [
+    AC_DEFINE(HAVE_GETPWNAM_R, 1,
+    [Define to 1 if your system has getpwnam_r.])
+  ]
+)
+
+AC_CHECK_FUNCS(getpwuid_r,
+  [
+    AC_DEFINE(HAVE_GETPWUID_R, 1,
+    [Define to 1 if your system has getpwuid_r.])
+  ]
+)
+
+AC_CHECK_FUNCS(getgrnam_r,
+  [
+    AC_DEFINE(HAVE_GETGRNAM_R, 1,
+    [Define to 1 if your system has getgrnam_r.])
+  ]
+)
+
+AC_CHECK_FUNCS(getgrgid_r,
+  [
+    AC_DEFINE(HAVE_GETGRGID_R, 1,
+    [Define to 1 if your system has getgrgid_r.])
+  ]
+)
+
+AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <pwd.h>
+int main(int argc, char*argv[])
+{
+#ifdef NSS_BUFLEN_PASSWD
+    return 0;
+#else
+    return 1;
+#endif
+}
+]])], [], [AC_DEFINE(NSS_BUFLEN_PASSWD, 1024, [Define default buflen for reentrant pwd functions])])
+
+AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#include <grp.h>
+int main(int argc, char*argv[])
+{
+#ifdef NSS_BUFLEN_GROUP
+    return 0;
+#else
+    return 1;
+#endif
+}
+]])], [], [AC_DEFINE(NSS_BUFLEN_GROUP, 1024, [Define default buflen for reentrant grp functions])])
+
+
 # checks for system services
 # (none yet)
 
diff --git a/pyconfig.h.in b/pyconfig.h.in
index 2af411705a..392fe7ff6c 100644
--- pyconfig.h.in
+++ pyconfig.h.in
@@ -403,6 +403,12 @@
 /* Define to 1 if you have the `getentropy' function. */
 #undef HAVE_GETENTROPY
 
+/* Define to 1 if your system has getgrgid_r. */
+#undef HAVE_GETGRGID_R
+
+/* Define to 1 if your system has getgrnam_r. */
+#undef HAVE_GETGRNAM_R
+
 /* Define to 1 if you have the `getgrouplist' function. */
 #undef HAVE_GETGROUPLIST
 
@@ -457,6 +463,12 @@
 /* Define to 1 if you have the `getpwent' function. */
 #undef HAVE_GETPWENT
 
+/* Define to 1 if your system has getpwnam_r. */
+#undef HAVE_GETPWNAM_R
+
+/* Define to 1 if your system has getpwuid_r. */
+#undef HAVE_GETPWUID_R
+
 /* Define to 1 if the getrandom() function is available */
 #undef HAVE_GETRANDOM
 
@@ -1281,6 +1293,12 @@
 /* Define if mvwdelch in curses.h is an expression. */
 #undef MVWDELCH_IS_EXPRESSION
 
+/* Define default buflen for reentrant grp functions */
+#undef NSS_BUFLEN_GROUP
+
+/* Define default buflen for reentrant pwd functions */
+#undef NSS_BUFLEN_PASSWD
+
 /* Define to the address where bug reports for this package should be sent. */
 #undef PACKAGE_BUGREPORT
 
